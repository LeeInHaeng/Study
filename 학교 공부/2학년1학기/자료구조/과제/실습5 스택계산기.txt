#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>

typedef struct stack {
	char data;
	struct stack *next;
}Stack;

typedef struct Cal_stack {
	double data;
	struct Cal_stack *next;
}Cal_stack;

void change(char exp[]); // 중위를 후위로 변환하는 함수
void push(Stack **, char); // char형 push 함수
void d_push(Cal_stack **, double); // double형 push 함수
char pop(Stack **); // char형 pop 함수
double d_pop(Cal_stack **head); // double형 pop 함수
char peek(Stack **); // prec으로 우선순위 비교를 위해 맨 뒤의값을 반환(pop과 비슷하지만 다름)
void display(Stack **);
int prec(char); // 연산자 우선순위 확인 함수
int check(char exp[]); // 문법 확인을 위한 함수
int stack_check(Stack **); // check 함수와 비슷하 역할
int is_empty(Stack **); // 스택이 비었는지 확인하는 함수
double cal(Stack **); // 후위로 변환된 것을 계산하는 함수

int main()
{
	char want[100];

	while (1)
	{
		printf("계산을 원하는 문자열을 입력하세요\n");
		printf("종료를 원하시면 \"exit\"을 입력하세요\n");
		printf("[ 예시 (2+3)*4+9 ] ---> ");
		scanf("%[^\n]s", want); // scanf로 개행문자도 받는 방법 (네이버 지식인)
		getchar(); // 개행 제거 --> getchar 사용 안할 시 scanf 그냥 지나감

		if (strcmp(want, "exit") == 0)
		{
			printf("\n프로그램을 정상 종료합니다.\n\n");
			break;
		}

		if (check(want) == 1) // 문법이 맞는지 확인 --> check 함수 사용
							  // 문법이 맞는 경우
			change(want); // 중위 표기법을 후위 표기법으로 변환후 계산
		else
			printf("문법에 맞지 않거나 정의 되지 않은 문자가 포함되어있습니다!\n다시 입력해 주세요\n\n");
	}

	return 0;
}

void change(char exp[]) // (2+3)*4+9 = 23+4*9+
{
	int i;
	int len = strlen(exp);
	double finalresult; // 후위 표기법으로 변환된 식의 최종 연산을 저장하는 변수
	char data;
	Stack *s = NULL; // 임시 스택
	Stack *res = NULL; // 후위 표기법의 결과 스택

	for (i = 0; i < len; i++)
	{
		data = exp[i];
		if (data == '(') // '(' 는 무조건 push
			push(&s, data);
		else if ((int)data >= 48 && (int)data <= 57) // 아스키 코드표로 48~57은 숫자 0~9
			push(&res, data); // 결과 스택에 푸쉬
		else if (data == '+' || data == '-' || data == '*' || data == '/' || data == '^') // 연산자 우선순위 비교 경우
		{
			// 수식이 들어오면 숫자를 공백으로 끊음
			push(&res, ' '); // 각 토큰 사이는 공백으로 구분(숫자 사이)
			if (prec(peek(&s)) < prec(data)) // 현재 데이터의 우선순위가 더 크면 push
				push(&s, data);
			else // 아니라면 결과에 pop 값을 push
			{
				push(&res, pop(&s));
				push(&res, ' '); // 각 토큰 사이는 공백으로 구분 res 스택에 push하기 전에 공백 추가
				push(&s, data); // 임시 스택에는 data값을 push
			}
		}
		else if (data == ')') // '('가 나올때까지 pop하면서 res 스택에 푸쉬
		{
			while (1)
			{
				if (peek(&s) == '(')
				{
					pop(&s);
					break;
				}
				push(&res, ' '); // 각 토큰 사이는 공백으로 구분 res 스택에 push하기 전에 공백 추가
				push(&res, pop(&s));
			}
		}
		else if (data == '.') //소수점을 위한 .이라면 결과에 push
			push(&res, data);

		/*
		// 각각의 스택 변화 단계를 출력 (test)
		display(&s);
		printf("\n\n");
		display(&res);
		printf("\n\n");
		*/

	} // for 문의 끝

	while (is_empty(&s) != 1) // for문이 다 돌았는데도 임시 스택에 데이터가 남아있다면
	{
		push(&res, ' '); // 각 토큰 사이는 공백으로 구분 res 스택에 push하기 전에 공백 추가
		push(&res, pop(&s)); // for문이 끝났으므로 남아있던 data들을 결과에 push
	}

	// 최종 스택의 상태 출력
	// 후위 표기법은 res 스택에 저장되어 있음
	/*
	display(&s);
	printf("\n\n");
	*/

	printf("후위 표기법 : ");
	display(&res);
	printf("\n\n");


	finalresult = cal(&res); // 후위표기법 계산 함수 호출
	printf("연산 수행 결과 : %.3lf\n\n\n", finalresult);

}

double cal(Stack **head)
{
	Stack *tmp;
	Cal_stack *res = NULL;
	char data;
	char digit[50]; // 잠시 숫자를 저장하기 위한 배열
	double result = 0; // 최종 결과를 위한 변수
	double tmp1;
	double tmp2;
	int cnt = 0; // 숫자의 자릿수 파악을 위한 변수 (digit의 인덱스 조절)

	tmp = *head;

	while (1)
	{
		data = tmp->data;

		if ((int)data >= 48 && (int)data <= 57) // 아스키 코드표로 48~57은 숫자 0~9
		{
			digit[cnt] = data;
			cnt++;
		}

		else if (data == '.')
		{
			digit[cnt] = data;
			cnt++;
		}

		else if (data == ' ') // 토큰 구분을 위한 공백을 만났다면
		{
			digit[cnt] = '\0';
			d_push(&res, atof(digit)); // res스택에 실수값을 push
			cnt = 0;
		}

		else // 데이터가 연산자라면
		{
			// res에 push되있던 실수를 2개 꺼냄
			// pop은 순서가 반대이기 떄문에 tmp2 --> tmp1 순으로 저장
			tmp2 = d_pop(&res);
			tmp1 = d_pop(&res);

			// 연산자에 따라서 계산
			switch (data)
			{
			case '+':
				result = tmp1 + tmp2;
				break;
			case '-':
				result = tmp1 - tmp2;
				break;
			case '*':
				result = tmp1 * tmp2;
				break;
			case '/':
				result = tmp1 / tmp2;
				if (tmp2 == 0) // 0으로 나누는 경우 예외 처리
				{
					printf("0으로 나눌 수 없습니다!\n");
					exit(0);
				}
				break;
			case '^':
				result = pow(tmp1, tmp2);
				break;
			}

			d_push(&res, result);

			tmp = tmp->next; // 연산자 다음에도 공백이기 때문에 tmp를 한칸 옮겨줌
			if (tmp == NULL)
				break;
		}
		tmp = tmp->next;
		if (tmp == NULL)
			break;
	}

	return result; // 결과 반환
}

int check(char exp[]) // (2+3))+*4b+9aa
{
	int i;
	int cnt = 0;
	int len = strlen(exp);
	char data;
	Stack *s = NULL;

	// 제일 처음이 틀린경우
	data = exp[0];
	if (data != '(' && data != ' ' && data != '+' && data != '-') // 처음이 오픈괄호나 공백이나 + , -도 아닌데
	{
		if ((int)data < 48 || (int)data > 57) //숫자까지 아닌경우
			return 0;
	}

	// 공백을 제외하고 일단 스택에 다 쌓는다.
	for (i = 0; i < len; i++)
	{
		data = exp[i];
		if (data != ' ')
		{
			cnt++;
			push(&s, data);
		}
	}

	// 스택의 최소 길이 : 1+1 / 123 ... 같이 3 이상 이어야됨
	if (cnt < 3)
		return 0;

	// s 스택에 쌓인 데이터들의 문법을 체크하기 시작
	if (stack_check(&s) == 1) // 문법검사에 이상 없으면 true
		return 1;
	else // 아니면 false
		return 0;
}

int stack_check(Stack **head)
{
	Stack *tmp;
	Stack *pre;
	char data; // tmp가 가리키는 데이터
	char child; // tmp의 next가 가리키는 데이터
	char predata; // tmp의 이전이 가리키는 데이터
	int balstatus = 0; // 괄호의 상태 표시 변수
	int dotstatus = 0; // 소수점의 상태 표시

	tmp = *head;
	pre = tmp;

	// 문법 검사 시작
	while (1)
	{
		data = tmp->data;
		predata = pre->data;

		if (tmp->next != NULL) // 런타임 에러를 없애기 위한 조건문
			child = tmp->next->data;
		else
			child = '-999';

		// 오픈 괄호 “(“ 다음에 반드시 “(“ 나 피연산자, 즉 숫자, “+”, “-“가 온다.
		if (data == '(')
		{
			// 에러 사항들
			if (child == '*' || child == '/' || child == '^' || child == '.' || child == ')')
				return 0;
			balstatus++;
			dotstatus = 0;
		}

		// 피연산자 다음에 “)” 나 연산기호 “+”, “-“, “*”, “/”, “^”,가 온다.
		else if ((int)data >= 48 && (int)data <= 57) // 아스키 코드표로 48~57은 숫자 0~9
		{
			// 에러 사항들
			if (child == '(')
				return 0;
		}

		// +- 같이 연산자가 연속으로 두번 나오는 경우 에러
		else if (data == '+' || data == '-' || data == '*' || data == '/' || data == '^')
		{
			// 에러 사항들
			if (child == '+' || child == '-' || child == '*' || child == '/' || child == '^')
				return 0;
			dotstatus = 0;
		}

		else if (data == ')')
		{
			balstatus--;
			// ())같이 balstatus가 -가 되는 순간 에러
			if (balstatus < 0)
				return 0;

			// (+)나 (5.) 같은 닫는 괄호 앞에 연산자나 소수점이 있으면 에러
			if (predata == '+' || predata == '-' || predata == '*' || predata == '/' || predata == '^' || predata == '.')
				return 0;
			dotstatus = 0;
		}

		else if (data == '.')
		{
			// 12.11.11 같이 소수점이 두번 나오면 에러
			dotstatus++;
			if (dotstatus == 2)
				return 0;

			// *. 같이 소수점 앞에 숫자가 아닌 경우 에러
			if ((int)predata < 48 || (int)predata > 57)
				return 0;
		}

		// 위에 정의되지 않은 문자가 온다면 에러
		else
			return 0;

		pre = tmp;
		tmp = tmp->next;

		if (tmp == NULL)
			break;
	} // while문의 끝

	 // “(“ 와 “)” 개수는 일치하여야 한다
	// while을 다 돌았는데 괄호의 갯수가 맞지 않다면 에러
	if (balstatus != 0)
		return 0;

	// 최종 문법 확인 완료 후 정상 리턴
	return 1;
}

// char push
void push(Stack **head, char data)
{
	Stack *newNode;
	Stack *tmp;

	newNode = (Stack *)malloc(sizeof(Stack));
	newNode->data = data;
	newNode->next = NULL;

	tmp = *head;

	if (*head == NULL)
	{
		*head = newNode;
		tmp = newNode;
	}
	else
	{
		while (tmp->next != NULL)
			tmp = tmp->next;
		tmp->next = newNode;
		tmp = newNode;
	}
}

// 실수형 push
void d_push(Cal_stack **head, double data)
{
	Cal_stack *newNode;
	Cal_stack *tmp;

	newNode = (Cal_stack *)malloc(sizeof(Cal_stack));
	newNode->data = data;
	newNode->next = NULL;

	tmp = *head;

	if (*head == NULL)
	{
		*head = newNode;
		tmp = newNode;
	}
	else
	{
		while (tmp->next != NULL)
			tmp = tmp->next;
		tmp->next = newNode;
		tmp = newNode;
	}
}

// char pop
char pop(Stack **head)
{
	Stack *tmp;
	Stack *pre;
	char popdata;
	tmp = *head;

	if (*head == NULL) // 헤드가 비어있다면 정의되지 않은값 리턴
		return 'a';

	while (tmp->next != NULL)
	{
		pre = tmp;
		tmp = tmp->next;
	}

	if (tmp == *head) // 헤드를 pop하는 경우
	{
		popdata = tmp->data;
		*head = NULL; // 헤드를 pop했으므로 헤드를 NULL로 만들어줌
	}
	else // 일반 pop 하는 경우
	{
		popdata = tmp->data;
		pre->next = tmp->next;
		free(tmp);
	}
	return popdata;
}

// 실수형 pop
double d_pop(Cal_stack **head)
{
	Cal_stack *tmp;
	Cal_stack *pre;
	double popdata;
	tmp = *head;

	if (*head == NULL) // 헤드가 비어있다면 정의되지 않은값 리턴
		return -999;

	while (tmp->next != NULL)
	{
		pre = tmp;
		tmp = tmp->next;
	}

	if (tmp == *head) // 헤드를 pop하는 경우
	{
		popdata = tmp->data;
		*head = NULL; // 헤드를 pop했으므로 헤드를 NULL로 만들어줌
	}
	else // 일반 pop 하는 경우
	{
		popdata = tmp->data;
		pre->next = tmp->next;
		free(tmp);
	}
	return popdata;
}

char peek(Stack **head)
{
	Stack *tmp;
	Stack *pre;
	char popdata;
	tmp = *head;

	if (*head == NULL) // 헤드가 비어있다면 정의되지 않은값 리턴
		return 'a';

	while (tmp->next != NULL)
	{
		pre = tmp;
		tmp = tmp->next;
	}

	popdata = tmp->data;

	return popdata;
}

void display(Stack **head)
{
	Stack *tmp;
	tmp = *head;
	while (tmp != NULL)
	{
		printf("%c", tmp->data);
		tmp = tmp->next;
	}
}

int prec(char ch)
{
	if (ch == '(' || ch == ')')
		return 0;
	else if (ch == '+' || ch == '-')
		return 1;
	else if (ch == '*' || ch == '/')
		return 2;
	else if (ch == '^')
		return 3;
	else
		return -1;
}

int is_empty(Stack **head)
{
	if (*head == NULL) // 스택이 비었다면 1반환
		return 1;
	else
		return 0;
}