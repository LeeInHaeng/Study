#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<arpa/inet.h>
#include<sys/socket.h>

#define BUF_SIZE 1024
#define OPSZ 4
void error_handling(char *msg);
int calculate(int opnum, int opnds[], char operator);

typedef struct opinfo{
        int nums[BUF_SIZE];
        char op;
}opinfo;

int main(int argc, char *argv[])
{
        int serv_sock, clnt_sock;
        opinfo info;
        //char opinfo[BUF_SIZE];
        int res, opnd_cnt, i;
        int recv_cnt, recv_len;
        struct sockaddr_in serv_adr, clnt_adr;
        socklen_t clnt_adr_sz;
        if(argc!=2){
                printf("Usage : %s <port>\n",argv[0]);
                exit(1);
        }

        serv_sock = socket(PF_INET, SOCK_STREAM, 0);
        if(serv_sock == -1)
                error_handling("sock error");

        memset(&serv_adr, 0, sizeof(serv_adr));
        serv_adr.sin_family = AF_INET;
        serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);
        serv_adr.sin_port = htons(atoi(argv[1]));
        if(bind(serv_sock, (struct sockaddr*)&serv_adr, sizeof(serv_adr)) == -1)
                error_handling("bind error");
        if(listen(serv_sock,5) == -1)
                error_handling("listen error");
        clnt_adr_sz = sizeof(clnt_adr);

        memset(&info, 0, sizeof(opinfo));

        for(i=0; i<5; i++)
        {
                opnd_cnt = 0;
                clnt_sock = accept(serv_sock, (struct sockaddr*)&clnt_adr, &clnt_adr_sz);
                //read(clnt_sock, &opnd_cnt,1);
                read(clnt_sock, (struct opinfo*)&info, sizeof(info));
                //printf("%d\n",info.nums[0]);

                /*
                recv_len = 0;
                while((opnd_cnt*OPSZ+1) > recv_len)
                {
                        recv_cnt = read(clnt_sock, &opinfo[recv_len], BUF_SIZE-1);
                        recv_len +=recv_cnt;
                }
                */
                res = calculate(info.nums[0], (int*)info.nums, info.op);
                write(clnt_sock, (char*)&res, sizeof(res));
                close(clnt_sock);
        }
        close(serv_sock);
        return 0;
}

int calculate(int opnum, int opnds[], char op)
{
        int res = opnds[1], i;

/*
        printf("%d / %c\n",opnum,op);
        for(i=1; i<opnum+1; i++)
        {
                printf("%d\n",opnds[i]);
        }
*/

        switch(op)
        {
        case '+':
                //for(i=1; i<opnum; i++) res +=opnds[i];
                for(i=2; i<opnum+1; i++) res +=opnds[i];
                break;
        case '-':
                //for(i=1; i<opnum; i++) res -=opnds[i];
                for(i=2; i<opnum+1; i++) res -=opnds[i];
                break;
        case '*':
                //for(i=1; i<opnum; i++) res*=opnds[i];
                for(i=2; i<opnum+1; i++) res*=opnds[i];
                break;
        }
        return res;
}

void error_handling(char *msg)
{
        fputs(msg,stderr);
        fputc('\n',stderr);
        exit(1);
}
